// ==== OLED PANEL ====
// This code uses the u8g2lib for graphics to display on
// the 1.3" OLED panel operating on driver SH1106

#include <Arduino.h>
#include <U8g2lib.h>
#include "ArduinoJson.h"
#include <Wire.h>


U8G2_SH1106_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);


bool showSplashScreen = true;
bool openSelectionScreen = false;
bool showCurrentRouteInfoScreen = false;

String currOperRoute = "Route 1";

// Define initial splash-screen bitmap
#define u8g2_logo_97x51_width 96
#define u8g2_logo_97x51_height 64
static const unsigned char u8g2_logo_97x51_bits[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x7A, 0xE3, 0xDD, 0x00, 0x00, 0xE0, 0x7D, 0xFF, 0xED, 0x3F, 0x00,
  0x00, 0xFE, 0xFF, 0xFF, 0x07, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x0F, 0x00, 0x10, 0x00, 0x00, 0x00, 0xC0, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x1C, 0x00, 0x30, 0x00, 0x00, 0x00, 0xC0, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x70, 0x00, 0x10, 0x00, 0x00, 0x00, 0xC0, 0x00,
  0x00, 0x06, 0xFC, 0x0F, 0x66, 0x00, 0xF0, 0xFF, 0x03, 0xFC, 0xFF, 0x00,
  0x00, 0x06, 0xFE, 0x3F, 0xCE, 0x00, 0xE0, 0xFF, 0x07, 0xFE, 0x7F, 0x00,
  0x00, 0x06, 0x06, 0x70, 0xCC, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0x06, 0xC0, 0x98, 0x01, 0x20, 0x22, 0x66, 0x26, 0x60, 0x00,
  0x00, 0x06, 0x06, 0xC0, 0x88, 0x01, 0x60, 0x26, 0x66, 0x66, 0x66, 0x00,
  0x00, 0x06, 0x06, 0x80, 0x01, 0x01, 0x20, 0x66, 0x26, 0x66, 0x66, 0x00,
  0x00, 0x02, 0x06, 0x00, 0x31, 0x03, 0x20, 0x06, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x80, 0x31, 0x01, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x31, 0x01, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x80, 0x31, 0x03, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x02, 0x06, 0x80, 0xB1, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0xC0, 0x99, 0x01, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0xE0, 0xD8, 0x00, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x7A, 0xCC, 0x00, 0x00, 0x00, 0x26, 0x06, 0x00, 0x00,
  0x00, 0x02, 0xFE, 0x1F, 0x40, 0x08, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00,
  0x00, 0x06, 0xE4, 0x02, 0x30, 0x1C, 0x00, 0x00, 0x66, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x38, 0x04, 0x00, 0x00, 0x66, 0x04, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00,
  0x00, 0x06, 0x10, 0x00, 0xE0, 0x61, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0xFE, 0x3F, 0x80, 0x71, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00,
  0x00, 0x06, 0xA6, 0xFA, 0x00, 0x03, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x80, 0x03, 0x06, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x07, 0xC6, 0x01, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0x06, 0x00, 0x06, 0xCC, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x04, 0x0C, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0x06, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x0C, 0x8C, 0x01, 0x00, 0x04, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x0C, 0x8C, 0x01, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0x06, 0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x06, 0xCC, 0x01, 0x00, 0x06, 0x02, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x00, 0x03, 0x84, 0x01, 0x00, 0x06, 0x04, 0x00, 0x00,
  0x00, 0x06, 0x06, 0x80, 0x03, 0x06, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x66, 0xFD, 0x00, 0x03, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x02, 0xFC, 0x7F, 0x00, 0x03, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x06, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00,
  0x00, 0x6E, 0xF7, 0xED, 0x1F, 0x00, 0x00, 0x00, 0x6E, 0x07, 0x00, 0x00,
  0x00, 0xFC, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xFC, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



char availableRoutes[] =
  "< Back\n"
  "Route 1\n"
  "Route 2\n"
  "Route 3\n"
  "Route 4\n"
  "Route 5\n"
  "Route 6\n"
  "Route 7";


uint8_t current_selection = 1;

void drawSelectionScreen() {

  current_selection = u8g2.userInterfaceSelectionList(
                        "ROUTES",
                        current_selection,
                        availableRoutes);

  String selection_str = u8x8_GetStringLineStart(current_selection - 1, availableRoutes);
  int firstIndex = selection_str.indexOf('\n');
  String selection_split = selection_str.substring(0, firstIndex);

  if (selection_split == "< Back") {
    openSelectionScreen = false;
    showCurrentRouteInfoScreen = true;
    return;
  }

  uint8_t selectRoute = u8g2.userInterfaceMessage(
  "Selection:",
  u8x8_GetStringLineStart(current_selection - 1, availableRoutes ),
  "",
  " Ok \n Cancel ");

  if (selectRoute == 1) {
    if(selection_split != currOperRoute){
      currOperRoute = selection_split;
  
      // Send new route to slave to post to firebase
      createAndSendToSlaveJSON(currOperRoute);
    }
    
    openSelectionScreen = false;
    showCurrentRouteInfoScreen = true;
    return;

  }
  else if (selectRoute == 2) {
    current_selection = 1;
    openSelectionScreen = true;
    showCurrentRouteInfoScreen = false;
    return;
  }
}

void drawCurrentRouteInfoScreen(String currRoute) {
  String routeString = currRoute;
  char buffer[routeString.length() + 1];
  routeString.toCharArray(buffer, routeString.length() + 1);

  uint8_t btnSelected =  u8g2.userInterfaceMessage(
   "Operating on:",
   buffer,
   "",
   " Change ");

  if (btnSelected == 1) {
    current_selection =  1;
    openSelectionScreen = true;
    showCurrentRouteInfoScreen = false;
    return;
  }
}


// -----------------------------------------------------------------------------

void setup() {
  
  Serial.begin(9600);
  
  Wire.begin();
  
  // Begin graphics on OLED panel
  u8g2.begin(/* menu_select_pin= */ 5, /* menu_next_pin= */ 4,
    /* menu_prev_pin= */ 2, /* menu_up_pin= */ U8X8_PIN_NONE,
    /* menu_down_pin= */ U8X8_PIN_NONE, /* menu_home_pin= */ 3);
 
}


void loop() {
  u8g2.firstPage();
  do {
    if (showSplashScreen == true) {
      // Show Splash Screen
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawXBMP(13, 0, u8g2_logo_97x51_width, u8g2_logo_97x51_height, u8g2_logo_97x51_bits);
      delay(50);
    } else {
      u8g2.setFont(u8g2_font_mercutio_basic_nbp_t_all);
      if (openSelectionScreen) {
        drawSelectionScreen();
      }
      else if (showCurrentRouteInfoScreen) drawCurrentRouteInfoScreen(currOperRoute);
    }

  } while ( u8g2.nextPage() );

  if (showSplashScreen) {
    showSplashScreen = false;
    showCurrentRouteInfoScreen = true;
  }
}

void createAndSendToSlaveJSON(String route){
  
  char sendJSONData[100];

  route.toCharArray(sendJSONData, 100);

  
  Wire.beginTransmission(4);
  Wire.write(sendJSONData);
  Wire.endTransmission();
  
  Serial.println("Executed SENDJSON func");
}
